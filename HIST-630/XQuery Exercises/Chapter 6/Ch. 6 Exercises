xquery version "3.1";

(:
Exercise 1: I looked at the fn:remove function. On the XQuery Functions website, the full signature is not given, although the description of the function is virtually the same as on the XPath and XQuery Functions and Operators specification, which does give the full signature:
fn:remove($target as item()*, $position as xs:integer) as item()*

The latter is more clear to me. The former is a more streamlined description of the function.

:)

(:
Exercise 2: Did the reading.
:)

(:
Exercise 3: 
fn:substring("Digital Humanities", 9)

fn:substring("Digital Humanities", 9, 10)
:)

(: Exercise 4
fn:head(("Shinpei Goto", "Gentara Kodama", "Kenjiro Den")) - returns Shinpei Goto

fn:tail(("Shinpei Goto", "Gentara Kodama", "Kenjiro Den")) - returns Gentara Kodama Kenjiro Den
:)

(:
declare namespace tei = "http://www.tei-c.org/ns/1.0";

declare function local:make-tei-title(
    $title as xs:string,
    $subtitle as xs:string?
    ) as element(tei:title) {
    <title type="full" xmlns="http://www.tei-c.org/ns/1.0">
        <title type="main">{ $title }</title>
        <title type="sub">{ $subtitle }</title>
    </title>
};

local:make-tei-title(
"Citizens at Last",
"The Woman Suffrage Movement in Texas"
)


let $title :="Citizens at Last"
let $subtitle :="The Woman Suffrage Movement in Texas"
let $join-titles :=
function($title as xs:string, $subtitle as xs:string)
as xs:string {
fn:concat($title, ": ", $subtitle)
}
return $join-titles($title, $subtitle)

Exercise 5
Attempt 1
declare namespace tei = "http://www.tei-c.org/ns/1.0";

declare function local:construct-english-list(
    $name1 as xs:string,
    $name2 as xs:string,
    $name3 as xs:string?
    ) as element(tei:list) {
    <list type="full" xmlns="http://www.tei-c.org/ns/1.0">
        <name type="name1">{ $name1 }</name>
        <name type="name2">{ $name2 }</name>
        <name type="name3">{ $name3 }</name>
    </list>

};

local:construct-english-list("Shinpei Goto", "Gentara Kodama", "Kenjiro Den")
:)
(:Attempt 2
declare namespace tei = "http://www.tei-c.org/ns/1.0";

declare function local:construct-english-list(
    $name1 as xs:string,
    $name2 as xs:string,
    $name3 as xs:string?
    ) as (:I cannot figure out what goes here - I want it to return the concatenated string but I can't figure out what to say here to allow for the fn:concat which appears next:) {
fn:concat($name1, ", ", $name2, ", ", "and ", $name3)
};

local:construct-english-list("Shinpei Goto", "Gentara Kodama", "Kenjiro Den")



Exercise 6:)

let $name1 :="Shinpei Goto"
let $name2 :="Gentaro Kodama"
let $name3 :="Kenjiro Den"
let $join-names :=
function($name1 as xs:string, $name2 as xs:string, $name3 as xs:string)
as xs:string {
fn:concat($name1, ", ", $name2, ", ", "and ", $name3)
}
return $join-names($name1, $name2, $name3)



(:
Exercise 7
As with Exercise 5, I can't figure out where to stick the fn:concat function so that the function works and gives the correct output (instead of the long TEI output)

declare namespace tei = "http://www.tei-c.org/ns/1.0";

declare function local:construct-tei-persName(
    $forename as xs:string,
    $surname as xs:string?
    ) as element(tei:persName) {
    <persName type="full" xmlns="http://www.tei-c.org/ns/1.0">
        <name type="forename">{ $forename }</name>
        <name type="surname">{ $surname }</name>
    </persName>
}
{ fn:concat($forename, $surname)}
;

local:construct-tei-persName(
"Shinpei", "Goto"
)

:)